---

name: Notify PRs about main Build
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

defaults:
  run:
    shell: bash

jobs:
  check_main_build_status:
    name: Check main Build status
    runs-on: [size-s]
    env:
      CURRENT_PR_NUMBER: ${{ github.event.pull_request.number }}
      BUILD_AND_TEST_WORKFLOW_ID: 65527582
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          sparse-checkout: .github

      - uses: actions/github-script@v6
        with:
          script: |
            console.log("Fetching the latest 10 main branch server_build_and_test Github Worklows which are completed")
            
            const { workflowRuns } = await github.rest.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: ${BUILD_AND_TEST_WORKFLOW_ID},
                  branch: 'main',
                  event: 'push',
                  per_page: 10,
                  status: 'completed'
                });
            let latestWorkflowRun = workflowRuns.workflow_runs[0].conclusion
            console.log("The latest main build and test was completed with status ${latestWorkflowRun}")
            
            let message = `‚ÑπÔ∏èChecking the main branch Build.`
            
            switch(latestRun) {
              case 'failure':
                console.log("Determining the first failure of pipeline run for main branch build and test.")    
                let currentWorkflowRun = workflowRuns
                while(currentWorkflowRun.workflow_runs[currentWorkflowRun.total_count-1].conclusion == 'failure') {
                  console.log("Searching for previous failure runs")
                  currentWorkflowRun = await github.rest.actions.listWorkflowRuns({
                                    owner: context.repo.owner,
                                    repo: context.repo.repo,
                                    workflow_id: ${BUILD_AND_TEST_WORKFLOW_ID},
                                    branch: 'main',
                                    event: 'push',
                                    per_page: 10,
                                    status: 'completed'
                                  });
            
                }
                let firstFailureRun = currentWorkflowRun.workflow_runs.reverse().find((x,i) => x.conclusion=='failure');
                console.log("First failure for the main branch build and test was ${firstFailureRun.html_url}. Finding failing step...") 
            
                await github.rest.actions.listJobsForWorkflowRun({
                                 owner: context.repo.owner,
                                 repo: context.repo.repo,
                                 run_id: firstFailureRun.id
                                }).then(data => {
                                    var fail_job = data.data.jobs.find((x,i) => x.conclusion == 'failure');
                                    console.log("Failing step for first main branch build found")
                                    message += `üö® The main build is failing at job [link](${fail_job.run_url}) and for commit_sha ${fail_job.head_sha}. Try reaching out author ${firstFailureRun.actor.login} üö®`
                                })
            
                break;
              case 'success':
                console.log("main builds are successful.")
                message += "‚ùáÔ∏è main builds are successful ‚ùáÔ∏è"
                break;
              default:
                console.log("Could not determine latest workflow run conclusion")
                message += "‚ö†Ô∏è Could not determine latest main branch build and test workflow conclusion ‚ö†Ô∏è"
            }
            
            const {CURRENT_PR_NUMBER} = process.env
            console.log(`Appending $message to the PR ${CURRENT_PR_NUMBER}`)
            github.rest.issues.createComment({
              issue_number: CURRENT_PR_NUMBER,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message,
            })
            
            
